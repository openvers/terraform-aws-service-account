name: 'Terraform Workflow Dispatch'

on:
  workflow_dispatch:
    inputs:
      terraform_operation:
        description: "Terraform operation: plan, apply, destroy"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  terraform-dispatch-read:
    name: Terraform Read Privilege Job
    if: "${{ github.event.act || github.event.inputs.terraform_operation == 'plan' }}"
    runs-on: ubuntu-latest
      
    defaults:
      run:
        working-directory: "./test"
        
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials - Local
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ github.event.act }}
        with:
          aws-access-key-id: ${{ secrets.AWS_CLIENT_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CLIENT_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true
          mask-aws-account-id: true
          retry-max-attempts: 3
          
      - name: Configure AWS Credentials - Github Runner
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ !github.event.act }}
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true
          mask-aws-account-id: true
          retry-max-attempts: 3
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  
      - name: Terraform init
        run: terraform init
  
      - name: Terraform plan
        run: terraform plan
    
  terraform-dispatch-write:
    name: Terraform Write Privilege Job
    environment: production
    if: "${{ github.event.act || github.event.inputs.terraform_operation == 'apply' || github.event.inputs.terraform_operation == 'destroy' }}"
    runs-on: ubuntu-latest
      
    defaults:
      run:
        working-directory: "./test"
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials - Local
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ github.event.act }}
        with:
          aws-access-key-id: ${{ secrets.AWS_CLIENT_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CLIENT_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true
          mask-aws-account-id: true
          retry-max-attempts: 3
          
      - name: Configure AWS Credentials - Github Runner
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ !github.event.act }}
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true
          mask-aws-account-id: true
          retry-max-attempts: 3
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
      - name: Terraform init
        run: terraform init

      - name: Terraform apply
        if: "${{ github.event.act || github.event.inputs.terraform_operation == 'apply' }}"
        run: terraform apply --auto-approve
  
      - name: Terraform destroy
        if: "${{ github.event.act || github.event.inputs.terraform_operation == 'destroy' }}"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: 'terraform -chdir=test destroy --auto-approve'
