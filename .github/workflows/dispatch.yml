name: 'Terraform Workflow Dispatch'

on:
  workflow_dispatch:
    inputs:
      terraform_operation:
        description: "Terraform operation: plan, apply, destroy"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  aws-credentials:
    name: AWS Credentials Config
    runs-on: ubuntu-latest
    outputs:
      aws-session-token: ${{ steps.aws-creds.outputs.aws-session-token }}

    steps:
      - name: Configure AWS Credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_CLIENT_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CLIENT_SECRET }}
          aws-region: ${{ secrets.AWS_REGION}}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: github-actions-session
    
  aws-credentials-production:
    name: AWS Credentials Config Production
    runs-on: ubuntu-latest
    environment: production
    outputs:
      aws-session-token: ${{ steps.aws-creds-prod.outputs.aws-session-token }}
    
    steps:
      - name: Configure AWS Credentials
        id: aws-creds-prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_CLIENT_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CLIENT_SECRET }}
          aws-region: ${{ secrets.AWS_REGION}}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: github-actions-session

  terraform-dispatch-read:
    name: Terraform Read Privilege Job
    if: "${{ github.event.act || github.event.inputs.terraform_operation == 'plan' }}"
    needs: [ aws-credentials ]
    runs-on: ubuntu-latest
      
    env:
      AWS_SESSION_TOKEN: ${{needs.aws-credentials.outputs.aws-session-token}}
      
    defaults:
      run:
        working-directory: "./test"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN_AWS_WORKSPACE }}
  
      - name: Terraform init
        run: terraform init
  
      - name: Terraform plan
        run: terraform plan
    
  terraform-dispatch-write:
    name: Terraform Write Privilege Job
    if: "${{ github.event.act || github.event.inputs.terraform_operation == 'apply' || github.event.inputs.terraform_operation == 'destroy' }}"
    needs: [ aws-credentials-production ]
    runs-on: ubuntu-latest
      
    env:
      AWS_SESSION_TOKEN: ${{needs.aws-credentials-production.outputs.aws-session-token}}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN_AWS_WORKSPACE }}
        
      - name: Terraform init
        run: terraform init

      - name: Terraform apply
        if: "${{ github.event.act || github.event.inputs.terraform_operation == 'apply' }}"
        run: terraform apply --auto-approve
  
      - name: Terraform destroy
        if: "${{ github.event.act || github.event.inputs.terraform_operation == 'destroy' }}"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: 'terraform -chdir=test destroy --auto-approve'
